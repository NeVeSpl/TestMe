// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TestMe.TestCreation.Persistence;

namespace TestMe.TestCreation.Migrations
{
    [DbContext(typeof(TestCreationDbContext))]
    partial class TestCreationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("TestCreation")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("TestMe.TestCreation.Domain.Catalog", b =>
                {
                    b.Property<long>("CatalogId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(2048);

                    b.Property<long>("OwnerId");

                    b.HasKey("CatalogId");

                    b.HasIndex("CatalogId");

                    b.ToTable("Catalog");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Catalog");
                });

            modelBuilder.Entity("TestMe.TestCreation.Domain.Owner", b =>
                {
                    b.Property<long>("OwnerId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("QuestionsCatalogsCount");

                    b.HasKey("OwnerId");

                    b.ToTable("Owner");
                });

            modelBuilder.Entity("TestMe.TestCreation.Domain.Question", b =>
                {
                    b.Property<long>("QuestionId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CatalogId");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid")
                        .HasDefaultValue(0u);

                    b.Property<string>("Content")
                        .HasMaxLength(2048);

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("OwnerId");

                    b.HasKey("QuestionId");

                    b.HasIndex("CatalogId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("TestMe.TestCreation.Domain.QuestionsCatalogItem", b =>
                {
                    b.Property<long>("CatalogOfQuestionsItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("CatalogOfQuestionsCatalogId");

                    b.Property<long>("TestId");

                    b.HasKey("CatalogOfQuestionsItemId");

                    b.HasIndex("CatalogOfQuestionsCatalogId");

                    b.ToTable("QuestionsCatalogItem");
                });

            modelBuilder.Entity("TestMe.TestCreation.Domain.Test", b =>
                {
                    b.Property<long>("TestId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CatalogId");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("OwnerId");

                    b.Property<string>("Title")
                        .HasMaxLength(2048);

                    b.HasKey("TestId");

                    b.HasIndex("CatalogId");

                    b.HasIndex("TestId");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("TestMe.TestCreation.Domain.QuestionsCatalog", b =>
                {
                    b.HasBaseType("TestMe.TestCreation.Domain.Catalog");

                    b.Property<int>("QuestionsCount");

                    b.HasIndex("OwnerId");

                    b.ToTable("Catalog");

                    b.HasDiscriminator().HasValue("QuestionsCatalog");
                });

            modelBuilder.Entity("TestMe.TestCreation.Domain.TestsCatalog", b =>
                {
                    b.HasBaseType("TestMe.TestCreation.Domain.Catalog");

                    b.HasIndex("OwnerId")
                        .HasName("IX_Catalog_OwnerId1");

                    b.ToTable("Catalog");

                    b.HasDiscriminator().HasValue("TestsCatalog");
                });

            modelBuilder.Entity("TestMe.TestCreation.Domain.Question", b =>
                {
                    b.HasOne("TestMe.TestCreation.Domain.QuestionsCatalog")
                        .WithMany("Questions")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsMany("TestMe.TestCreation.Domain.Answer", "Answers", b1 =>
                        {
                            b1.Property<long>("AnswerId")
                                .ValueGeneratedOnAdd();

                            b1.Property<string>("Content")
                                .HasMaxLength(2048);

                            b1.Property<bool>("IsCorrect");

                            b1.Property<short>("OrdinalNumber");

                            b1.Property<long>("QuestionId");

                            b1.HasKey("AnswerId");

                            b1.HasIndex("QuestionId");

                            b1.ToTable("Answer");

                            b1.HasOne("TestMe.TestCreation.Domain.Question")
                                .WithMany("Answers")
                                .HasForeignKey("QuestionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("TestMe.TestCreation.Domain.QuestionsCatalogItem", b =>
                {
                    b.HasOne("TestMe.TestCreation.Domain.QuestionsCatalog", "CatalogOfQuestions")
                        .WithMany()
                        .HasForeignKey("CatalogOfQuestionsCatalogId");
                });

            modelBuilder.Entity("TestMe.TestCreation.Domain.Test", b =>
                {
                    b.HasOne("TestMe.TestCreation.Domain.TestsCatalog")
                        .WithMany("Tests")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsMany("TestMe.TestCreation.Domain.QuestionItem", "Questions", b1 =>
                        {
                            b1.Property<long>("QuestionItemId")
                                .ValueGeneratedOnAdd();

                            b1.Property<long?>("QuestionId");

                            b1.Property<long>("TestId");

                            b1.HasKey("QuestionItemId");

                            b1.HasIndex("QuestionId");

                            b1.HasIndex("QuestionItemId");

                            b1.HasIndex("TestId");

                            b1.ToTable("QuestionItem");

                            b1.HasOne("TestMe.TestCreation.Domain.Question", "Question")
                                .WithMany()
                                .HasForeignKey("QuestionId");

                            b1.HasOne("TestMe.TestCreation.Domain.Test")
                                .WithMany("Questions")
                                .HasForeignKey("TestId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("TestMe.TestCreation.Domain.QuestionsCatalog", b =>
                {
                    b.HasOne("TestMe.TestCreation.Domain.Owner")
                        .WithMany("QuestionsCatalogs")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestMe.TestCreation.Domain.TestsCatalog", b =>
                {
                    b.HasOne("TestMe.TestCreation.Domain.Owner")
                        .WithMany("TestsCatalogs")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_Catalog_Owner_OwnerId1")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
