// This file was autogenerated by http://frhagn.github.io/Typewriter/


//eslint-disable-next-line
import { ApiBaseService, IUseRequest, IUseRequestWithResult, useRequest, useRequestWithResult, CursorPagedResults, CursorPagination, OffsetPagedResults, OffsetPagination } from "../base/index";
//eslint-disable-next-line 
 import { TestHeaderDTO } from "../dtos/TestMe.TestCreation.App.Tests.Output.TestHeaderDTO";
//eslint-disable-next-line 
 import { TestDTO } from "../dtos/TestMe.TestCreation.App.Tests.Output.TestDTO";
//eslint-disable-next-line 
 import { QuestionItemDTO } from "../dtos/TestMe.TestCreation.App.Tests.Output.QuestionItemDTO";
//eslint-disable-next-line 
 import { QuestionHeaderDTO } from "../dtos/TestMe.TestCreation.App.Tests.Output.QuestionHeaderDTO";
//eslint-disable-next-line 
 import { CreateTestDTO } from "../dtos/TestMe.Presentation.API.Controllers.Tests.Input.CreateTestDTO";
//eslint-disable-next-line 
 import { UpdateTestDTO } from "../dtos/TestMe.Presentation.API.Controllers.Tests.Input.UpdateTestDTO";
//eslint-disable-next-line 
 import { CreateQuestionItemDTO } from "../dtos/TestMe.Presentation.API.Controllers.Tests.Input.CreateQuestionItemDTO";
//eslint-disable-next-line 
 import { UpdateQuestionItemDTO } from "../dtos/TestMe.Presentation.API.Controllers.Tests.Input.UpdateQuestionItemDTO";
export * from "../dtos/TestMe.TestCreation.App.Tests.Output.TestHeaderDTO";
export * from "../dtos/TestMe.TestCreation.App.Tests.Output.TestDTO";
export * from "../dtos/TestMe.TestCreation.App.Tests.Output.QuestionItemDTO";
export * from "../dtos/TestMe.TestCreation.App.Tests.Output.QuestionHeaderDTO";
export * from "../dtos/TestMe.Presentation.API.Controllers.Tests.Input.CreateTestDTO";
export * from "../dtos/TestMe.Presentation.API.Controllers.Tests.Input.UpdateTestDTO";
export * from "../dtos/TestMe.Presentation.API.Controllers.Tests.Input.CreateQuestionItemDTO";
export * from "../dtos/TestMe.Presentation.API.Controllers.Tests.Input.UpdateQuestionItemDTO";
export * from "../base/index";

export class TestsService extends ApiBaseService
{
    static Type = "TestsService";

    readTestHeaders(catalogId: number, pagination: OffsetPagination) : Promise<OffsetPagedResults<TestHeaderDTO>>
    {
        return this.MakeRequestWithResult<OffsetPagedResults<TestHeaderDTO>>("get", `Tests/headers?catalogId=${catalogId}&offset=${pagination.offset}&limit=${pagination.limit}`, null);
    }
    readTestWithQuestionItemsAndQuestionHeaders(testId: number) : Promise<TestDTO>
    {
        return this.MakeRequestWithResult<TestDTO>("get", `Tests/${testId}`, null);
    }
    createTest(createTest: CreateTestDTO) : Promise<number>
    {
        return this.MakeRequestWithResult<number>("post", `Tests`, createTest);
    }
    updateTest(testId: number, updateTest: UpdateTestDTO) 
    {
        return this.MakeRequest("put", `Tests/${testId}`, updateTest);
    }
    deleteTest(testId: number) 
    {
        return this.MakeRequest("delete", `Tests/${testId}`, null);
    }
    createQuestionItem(testId: number, createQuestionItem: CreateQuestionItemDTO) : Promise<number>
    {
        return this.MakeRequestWithResult<number>("post", `Tests/${testId}/questions`, createQuestionItem);
    }
    updateQuestionItem(testId: number, questionItemId: number, updateQuestionItem: UpdateQuestionItemDTO) 
    {
        return this.MakeRequest("put", `Tests/${testId}/questions/${questionItemId}`, updateQuestionItem);
    }
    deleteQuestionItem(testId: number, questionItemId: number) 
    {
        return this.MakeRequest("delete", `Tests/${testId}/questions/${questionItemId}`, null);
    }
           
}

export function useAPIReadTestHeaders(catalogId: number, pagination: OffsetPagination, deps?: ReadonlyArray<unknown>) : IUseRequestWithResult<OffsetPagedResults<TestHeaderDTO>>
{
    return useRequestWithResult<OffsetPagedResults<TestHeaderDTO>>("get", `Tests/headers?catalogId=${catalogId}&offset=${pagination.offset}&limit=${pagination.limit}`, null, {} as OffsetPagedResults<TestHeaderDTO>,  deps);
}
export function useAPIReadTestWithQuestionItemsAndQuestionHeaders(testId: number, deps?: ReadonlyArray<unknown>) : IUseRequestWithResult<TestDTO>
{
    return useRequestWithResult<TestDTO>("get", `Tests/${testId}`, null, new TestDTO(),  deps);
}
export function useAPICreateTest(createTest: CreateTestDTO, deps?: ReadonlyArray<unknown>) : IUseRequestWithResult<number>
{
    return useRequestWithResult<number>("post", `Tests`, createTest, 0,  deps);
}
export function useAPIUpdateTest(testId: number, updateTest: UpdateTestDTO, deps?: ReadonlyArray<unknown>) : IUseRequest
{
    return useRequest("put", `Tests/${testId}`, updateTest, deps);
}
export function useAPIDeleteTest(testId: number, deps?: ReadonlyArray<unknown>) : IUseRequest
{
    return useRequest("delete", `Tests/${testId}`, null, deps);
}
export function useAPICreateQuestionItem(testId: number, createQuestionItem: CreateQuestionItemDTO, deps?: ReadonlyArray<unknown>) : IUseRequestWithResult<number>
{
    return useRequestWithResult<number>("post", `Tests/${testId}/questions`, createQuestionItem, 0,  deps);
}
export function useAPIUpdateQuestionItem(testId: number, questionItemId: number, updateQuestionItem: UpdateQuestionItemDTO, deps?: ReadonlyArray<unknown>) : IUseRequest
{
    return useRequest("put", `Tests/${testId}/questions/${questionItemId}`, updateQuestionItem, deps);
}
export function useAPIDeleteQuestionItem(testId: number, questionItemId: number, deps?: ReadonlyArray<unknown>) : IUseRequest
{
    return useRequest("delete", `Tests/${testId}/questions/${questionItemId}`, null, deps);
}

