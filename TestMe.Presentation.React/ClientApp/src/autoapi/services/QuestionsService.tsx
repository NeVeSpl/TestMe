// This file was autogenerated by http://frhagn.github.io/Typewriter/


//eslint-disable-next-line
import { ApiBaseService, IUseRequest, IUseRequestWithResult, useRequest, useRequestWithResult, CursorPagedResults, CursorPagination, OffsetPagedResults, OffsetPagination } from "../base/index";
//eslint-disable-next-line 
 import { QuestionHeaderDTO } from "../dtos/TestMe.TestCreation.App.Questions.Output.QuestionHeaderDTO";
//eslint-disable-next-line 
 import { QuestionDTO } from "../dtos/TestMe.TestCreation.App.Questions.Output.QuestionDTO";
//eslint-disable-next-line 
 import { AnswerDTO } from "../dtos/TestMe.TestCreation.App.Questions.Output.AnswerDTO";
//eslint-disable-next-line 
 import { CreateQuestionDTO } from "../dtos/TestMe.Presentation.API.Controllers.Questions.Input.CreateQuestionDTO";
//eslint-disable-next-line 
 import { UpdateQuestionDTO } from "../dtos/TestMe.Presentation.API.Controllers.Questions.Input.UpdateQuestionDTO";
export * from "../dtos/TestMe.TestCreation.App.Questions.Output.QuestionHeaderDTO";
export * from "../dtos/TestMe.TestCreation.App.Questions.Output.QuestionDTO";
export * from "../dtos/TestMe.TestCreation.App.Questions.Output.AnswerDTO";
export * from "../dtos/TestMe.Presentation.API.Controllers.Questions.Input.CreateQuestionDTO";
export * from "../dtos/TestMe.Presentation.API.Controllers.Questions.Input.UpdateQuestionDTO";
export * from "../base/index";

export class QuestionsService extends ApiBaseService
{
    readQuestionHeaders(catalogId: number, pagination: OffsetPagination) : Promise<OffsetPagedResults<QuestionHeaderDTO>>
    {
        return this.MakeRequestWithResult<OffsetPagedResults<QuestionHeaderDTO>>("get", `Questions/headers?catalogId=${catalogId}&offset=${pagination.offset}&limit=${pagination.limit}`, null);
    }
    readQuestionHeadersAsync(catalogId: number) : Promise<QuestionHeaderDTO[]>
    {
        return this.MakeRequestWithResult<QuestionHeaderDTO[]>("get", `Questions/headers/async?catalogId=${catalogId}`, null);
    }
    readQuestionHeader(questionId: number) : Promise<QuestionHeaderDTO>
    {
        return this.MakeRequestWithResult<QuestionHeaderDTO>("get", `Questions/${questionId}/header`, null);
    }
    readQuestionWithAnswers(questionId: number) : Promise<QuestionDTO>
    {
        return this.MakeRequestWithResult<QuestionDTO>("get", `Questions/${questionId}`, null);
    }
    readQuestionWithAnswersAsync(questionId: number) : Promise<QuestionDTO>
    {
        return this.MakeRequestWithResult<QuestionDTO>("get", `Questions/${questionId}/async`, null);
    }
    createQuestionWithAnswers(createQuestion: CreateQuestionDTO) : Promise<number>
    {
        return this.MakeRequestWithResult<number>("post", `Questions`, createQuestion);
    }
    updateQuestionWithAnswers(questionId: number, updateQuestion: UpdateQuestionDTO) 
    {
        return this.MakeRequest("put", `Questions/${questionId}`, updateQuestion);
    }
    deleteQuestionWithAnswers(questionId: number) 
    {
        return this.MakeRequest("delete", `Questions/${questionId}`, null);
    }
           
}

export function useAPIReadQuestionHeaders(catalogId: number, pagination: OffsetPagination, deps?: ReadonlyArray<unknown>) : IUseRequestWithResult<OffsetPagedResults<QuestionHeaderDTO>>
{
    return useRequestWithResult<OffsetPagedResults<QuestionHeaderDTO>>("get", `Questions/headers?catalogId=${catalogId}&offset=${pagination.offset}&limit=${pagination.limit}`, null, {} as OffsetPagedResults<QuestionHeaderDTO>,  deps);
}
export function useAPIReadQuestionHeadersAsync(catalogId: number, deps?: ReadonlyArray<unknown>) : IUseRequestWithResult<QuestionHeaderDTO[]>
{
    return useRequestWithResult<QuestionHeaderDTO[]>("get", `Questions/headers/async?catalogId=${catalogId}`, null, {} as QuestionHeaderDTO[],  deps);
}
export function useAPIReadQuestionHeader(questionId: number, deps?: ReadonlyArray<unknown>) : IUseRequestWithResult<QuestionHeaderDTO>
{
    return useRequestWithResult<QuestionHeaderDTO>("get", `Questions/${questionId}/header`, null, new QuestionHeaderDTO(),  deps);
}
export function useAPIReadQuestionWithAnswers(questionId: number, deps?: ReadonlyArray<unknown>) : IUseRequestWithResult<QuestionDTO>
{
    return useRequestWithResult<QuestionDTO>("get", `Questions/${questionId}`, null, new QuestionDTO(),  deps);
}
export function useAPIReadQuestionWithAnswersAsync(questionId: number, deps?: ReadonlyArray<unknown>) : IUseRequestWithResult<QuestionDTO>
{
    return useRequestWithResult<QuestionDTO>("get", `Questions/${questionId}/async`, null, new QuestionDTO(),  deps);
}
export function useAPICreateQuestionWithAnswers(createQuestion: CreateQuestionDTO, deps?: ReadonlyArray<unknown>) : IUseRequestWithResult<number>
{
    return useRequestWithResult<number>("post", `Questions`, createQuestion, 0,  deps);
}
export function useAPIUpdateQuestionWithAnswers(questionId: number, updateQuestion: UpdateQuestionDTO, deps?: ReadonlyArray<unknown>) : IUseRequest
{
    return useRequest("put", `Questions/${questionId}`, updateQuestion, deps);
}
export function useAPIDeleteQuestionWithAnswers(questionId: number, deps?: ReadonlyArray<unknown>) : IUseRequest
{
    return useRequest("delete", `Questions/${questionId}`, null, deps);
}

