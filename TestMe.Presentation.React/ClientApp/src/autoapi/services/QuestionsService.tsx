// This file was autogenerated by http://frhagn.github.io/Typewriter/


//eslint-disable-next-line
import { ApiBaseService, IUseRequest, IUseRequestWithResult, useRequest, useRequestWithResult, CursorPagedResults, CursorPagination, OffsetPagedResults, OffsetPagination } from "../base/index";
import { QuestionOnListDTO } from "../dtos/TestMe.TestCreation.App.RequestHandlers.Questions.ReadQuestions.QuestionOnListDTO";
import { QuestionWithAnswersDTO } from "../dtos/TestMe.TestCreation.App.RequestHandlers.Questions.ReadQuestion.QuestionWithAnswersDTO";
import { AnswerDTO } from "../dtos/TestMe.TestCreation.App.RequestHandlers.Questions.ReadQuestion.AnswerDTO";
import { CreateQuestionDTO } from "../dtos/TestMe.Presentation.API.Controllers.Questions.Input.CreateQuestionDTO";
import { UpdateQuestionDTO } from "../dtos/TestMe.Presentation.API.Controllers.Questions.Input.UpdateQuestionDTO";
export * from "../dtos/TestMe.TestCreation.App.RequestHandlers.Questions.ReadQuestions.QuestionOnListDTO";
export * from "../dtos/TestMe.TestCreation.App.RequestHandlers.Questions.ReadQuestion.QuestionWithAnswersDTO";
export * from "../dtos/TestMe.TestCreation.App.RequestHandlers.Questions.ReadQuestion.AnswerDTO";
export * from "../dtos/TestMe.Presentation.API.Controllers.Questions.Input.CreateQuestionDTO";
export * from "../dtos/TestMe.Presentation.API.Controllers.Questions.Input.UpdateQuestionDTO";
export * from "../base/index";

export class QuestionsService extends ApiBaseService
{
    static Type = "QuestionsService";

    readQuestions(catalogId: number, pagination: OffsetPagination) : Promise<OffsetPagedResults<QuestionOnListDTO>>
    {
        return this.MakeRequestWithResult<OffsetPagedResults<QuestionOnListDTO>>("get", `Questions?catalogId=${catalogId}&offset=${pagination.offset}&limit=${pagination.limit}`, null);
    }
    readQuestionWithAnswers(questionId: number) : Promise<QuestionWithAnswersDTO>
    {
        return this.MakeRequestWithResult<QuestionWithAnswersDTO>("get", `Questions/${questionId}`, null);
    }
    createQuestionWithAnswers(createQuestion: CreateQuestionDTO) : Promise<number>
    {
        return this.MakeRequestWithResult<number>("post", `Questions`, createQuestion);
    }
    updateQuestionWithAnswers(questionId: number, updateQuestion: UpdateQuestionDTO)
    {
        return this.MakeRequest("put", `Questions/${questionId}`, updateQuestion);
    }
    deleteQuestionWithAnswers(questionId: number)
    {
        return this.MakeRequest("delete", `Questions/${questionId}`, null);
    }
    
}

export function useAPIReadQuestions(catalogId: number, pagination: OffsetPagination, deps?: ReadonlyArray<unknown>) : IUseRequestWithResult<OffsetPagedResults<QuestionOnListDTO>>
{
    return useRequestWithResult<OffsetPagedResults<QuestionOnListDTO>>("get", `Questions?catalogId=${catalogId}&offset=${pagination.offset}&limit=${pagination.limit}`, null, {} as OffsetPagedResults<QuestionOnListDTO>,  deps);
}
export function useAPIReadQuestionWithAnswers(questionId: number, deps?: ReadonlyArray<unknown>) : IUseRequestWithResult<QuestionWithAnswersDTO>
{
    return useRequestWithResult<QuestionWithAnswersDTO>("get", `Questions/${questionId}`, null, new QuestionWithAnswersDTO(),  deps);
}
export function useAPICreateQuestionWithAnswers(createQuestion: CreateQuestionDTO, deps?: ReadonlyArray<unknown>) : IUseRequestWithResult<number>
{
    return useRequestWithResult<number>("post", `Questions`, createQuestion, 0,  deps);
}
export function useAPIUpdateQuestionWithAnswers(questionId: number, updateQuestion: UpdateQuestionDTO, deps?: ReadonlyArray<unknown>) : IUseRequest
{
    return useRequest("put", `Questions/${questionId}`, updateQuestion, deps);
}
export function useAPIDeleteQuestionWithAnswers(questionId: number, deps?: ReadonlyArray<unknown>) : IUseRequest
{
    return useRequest("delete", `Questions/${questionId}`, null, deps);
}

