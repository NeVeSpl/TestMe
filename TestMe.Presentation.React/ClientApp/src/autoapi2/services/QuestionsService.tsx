// This file was autogenerated by https://github.com/NeVeSpl/NTypewriter


//eslint-disable-next-line
import { ApiBaseService, IUseRequest, IUseRequestWithResult, useRequest, useRequestWithResult, CursorPagedResults, CursorPagination, OffsetPagedResults, OffsetPagination } from "../base/index";
import { QuestionOnListDTO } from "../dtos/TestMe.TestCreation.App.RequestHandlers.Questions.ReadQuestions.QuestionOnListDTO";
import { QuestionWithAnswersDTO } from "../dtos/TestMe.TestCreation.App.RequestHandlers.Questions.ReadQuestion.QuestionWithAnswersDTO";
import { CreateQuestionDTO } from "../dtos/TestMe.Presentation.API.Controllers.Questions.Input.CreateQuestionDTO";
import { UpdateQuestionDTO } from "../dtos/TestMe.Presentation.API.Controllers.Questions.Input.UpdateQuestionDTO";
export * from "../dtos/TestMe.TestCreation.App.RequestHandlers.Questions.ReadQuestions.QuestionOnListDTO";
export * from "../dtos/TestMe.TestCreation.App.RequestHandlers.Questions.ReadQuestion.QuestionWithAnswersDTO";
export * from "../dtos/TestMe.Presentation.API.Controllers.Questions.Input.CreateQuestionDTO";
export * from "../dtos/TestMe.Presentation.API.Controllers.Questions.Input.UpdateQuestionDTO";
export * from "../base/index";

export class QuestionsService extends ApiBaseService
{
    static Type = "QuestionsService";

    readQuestions(catalogId: number, pagination: OffsetPagination) : Promise<OffsetPagedResults<QuestionOnListDTO>>
    {
        return this.MakeRequestWithResult<OffsetPagedResults<QuestionOnListDTO>>("get", `Questions?catalogId=${catalogId}&offset=${pagination.offset}&limit=${pagination.limit}`, null);
    }
    readQuestionWithAnswers(questionId: number) : Promise<QuestionWithAnswersDTO>
    {
        return this.MakeRequestWithResult<QuestionWithAnswersDTO>("get", `Questions/${questionId}`, null);
    }
    createQuestionWithAnswers(createQuestion: CreateQuestionDTO) : Promise<number>
    {
        return this.MakeRequestWithResult<number>("post", `Questions`, createQuestion);
    }
    updateQuestionWithAnswers(questionId: number, updateQuestion: UpdateQuestionDTO)
    {
        return this.MakeRequest("put", `Questions/${questionId}`, updateQuestion);
    }
    deleteQuestionWithAnswers(questionId: number)
    {
        return this.MakeRequest("delete", `Questions/${questionId}`, null);
    }
    
}


