{{- for controller in data.Classes | Symbols.WhereNameEndsWith "Controller" | Symbols.WhereNamespaceStartsWith "TestMe.Presentation.API.Controllers."
        capture output
        serviceName = controller.BareName | String.Replace "Controller" "Service"
-}}
// This file was autogenerated by https://github.com/NeVeSpl/NTypewriter


//eslint-disable-next-line
import { ApiBaseService, IUseRequest, IUseRequestWithResult, useRequest, useRequestWithResult, CursorPagedResults, CursorPagination, OffsetPagedResults, OffsetPagination } from "../base/index";
{{ Custom.GenImport controller }}
{{ Custom.GenExport controller }}
export * from "../base/index";

export class {{ serviceName }} extends ApiBaseService
{
    static Type = "{{ serviceName }}";
{{ for method in controller.Methods
       returnType = method | Action.ReturnType | Type.ToTypeScriptType;
       bodyParameterName = (method | Action.BodyParameter)?.Name ?? "null";
       parameters = method | Action.Parameters | Parameters.ToTypeScript | Array.Join ", ";
      
       if returnType != null
          returnType = "<" | String.Append returnType | String.Append ">";           
       end
}}
    {{ method.Name | String.ToCamelCase }}({{ parameters }}){{ if returnType != null }} : Promise{{ returnType }}{{ end }}
    {
        return this.MakeRequest{{returnType ? "WithResult" : null}}{{ returnType }}("{{ method | Action.HttpMethod }}", `{{ method | Action.Url }}`, {{ bodyParameterName }});
    }
{{- end }}
    
}


{{      end; 
   Save output ("services\\" | String.Append controller.BareName | String.Replace "Controller" "Service.tsx" )
   end; }}